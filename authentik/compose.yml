services:
  postgresql:
    image: ${SERVICES_POSTGRESQL_IMAGE:-docker.io/library/postgres}:${SERVICES_POSTGRESQL_IMAGE_VERSION:-16-alpine}
    container_name: ${SERVICES_POSTGRESQL_CONTAINER_NAME:-authentik-db}
    hostname: ${SERVICES_POSTGRESQL_HOSTNAME:-authentik-db}
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./authentik/database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASSWORD:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    networks:
      - backend
    labels:
      - net.unraid.docker.managed=composeman
      - net.unraid.docker.icon=https://github.com/juusujanar/unraid-templates/raw/master/img/PostgreSQL-logo.png
  redis:
    image: ${SERVICES_REDIS_IMAGE:-docker.io/library/redis}:${SERVICES_REDIS_IMAGE_VERSION:-alpine}
    container_name: ${SERVICES_REDIS_CONTAINER_NAME:-authentik-redis}
    hostname: ${SERVICES_REDIS_HOSTNAME:-authentik-redis}
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - redis-cli ping | grep PONG
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./authentik/redis:/data
    networks:
      - backend
    labels:
      - net.unraid.docker.managed=composeman
      - net.unraid.docker.icon=https://raw.githubusercontent.com/juusujanar/unraid-templates/master/img/Redis-logo.png
  server:
    image: ${SERVICES_SERVER_IMAGE:-ghcr.io/goauthentik/server}:${SERVICES_SERVER_IMAGE_VERSION:-${AUTHENTIK_TAG}
    container_name: ${SERVICES_SERVER_CONTAINER_NAME:-authentik-server}
    hostname: ${SERVICES_SERVER_HOSTNAME:-authentik-server}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASSWORD}
    volumes:
      - ./authentik/media:/media
      - ./authentik/custom-templates:/templates
    env_file:
      - .env
    # ports:
    #   - ${COMPOSE_PORT_HTTP:-9000}:9000
    #   - ${COMPOSE_PORT_HTTPS:-9443}:9443
    labels:
      - traefik.enable=true
      - traefik.network=frontend
      - traefik.http.routers.authentik-server.entrypoints=websecure,homesec
      - traefik.http.routers.authentik-server.rule=Host(`authentik.${DOMAIN}.de`) || HostRegexp(`[A-Za-z0-9](?:[A-Za-z0-9\-]{0,61}[A-Za-z0-9])?\\.${DOMAIN}\\.de`) && PathPrefix(`/outpost.goauthentik.io/`)
      - traefik.http.routers.authentik-server.service=authentik-server
      - traefik.http.services.authentik-server.loadbalancer.server.port=9000
      - net.unraid.docker.managed=composeman
      - net.unraid.docker.webui=http://[IP]:[PORT:9000]/files/
      - net.unraid.docker.icon=https://raw.githubusercontent.com/ibracorp/app-logos/main/authentik/authentik.png
    depends_on:
      - postgresql
      - redis
    networks:
      - backend
      - frontend
  worker:
    image: ${SERVICES_WORKER_IMAGE:-ghcr.io/goauthentik/server}:${SERVICES_WORKER_IMAGE_VERSION:-${AUTHENTIK_TAG}
    container_name: ${SERVICES_WORKER_CONTAINER_NAME:-authentik-worker}
    hostname: ${SERVICES_WORKER_HOSTNAME:-authentik-worker}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik-redis
      AUTHENTIK_POSTGRESQL__HOST: authentik-db
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASSWORD}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./authentik/media:/media
      - ./authentik/certs:/certs
      - ./authentik/custom-templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
    networks:
      - backend
    labels:
      - net.unraid.docker.managed=composeman
      - net.unraid.docker.icon=https://raw.githubusercontent.com/ibracorp/app-logos/main/authentik-worker/authentik_worker.png
networks:
  backend:
    external: true
  frontend:
    external: true
